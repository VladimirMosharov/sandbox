<header>
	<div class="wrapper">
		<button class="btn_input" id="btnExit">Выход</button>
	</div>
	<h1>Добро пожаловать!</h1>	
</header>
<section class="wrapper clearfix">
	<h2>Что это?</h2>
	<div class="text_content">
		<blockquote  class="clearfix">Пятьдесят оттенков серого же! Нет?...</blockquote>
		<p>Это приложение - результат моих экспериментов с объектами на javascript (и php - но позже)</p>
		<p>Цели:</p>
		<ul>
			<li>
				модульность - каждое представление-страница должны быть отделены от других
				таких же представлений, сохраняя возможность взаимодействовать, к представлениям могут подключаться 
				более мелкие модули со своей функциональностью
			</li>
			<li>
				расширяемость - предполагается добавлять модули по необходимости до бесконечности
			</li>
			<li>
				отделение внешнего вида программы от собственно движка и модулей, 
				а также клиентского движка от серверной части
			</li>
			<li>
				реализация без использования сторонних библиотек - только JS, PHP, HTML, CSS, SqLite
			</li>
		</ul>
	</div>
	<h2>Как это работает?</h2>
	<div class="text_content">
		<blockquote class="clearfix">Как прибили, так и держится!</blockquote>
		
		<p>Файл index.php содержит в head ссылки на стилевую таблицу, а так же загружает скрипт с мелкими
		вспомогательными функциями, объявление объекта Request() для запросов к серверу через xmlxtth, главный скрипт, ну и, конечно же body. И всё. </p>
		
		<p>Единственный на всю жизнь приложения глобальный экземпляр объекта AppParams() из главного скрипта содержит информацию о пользователе, о всех
		возможных состояниях с их зависимостями от других модулей(нужно исправить - пусть список состояний тоже будет динамическим), 
		отверстие, в которое одно представление засовывает сообщение для другого, и, собственно, переключалку представлений</p>
		
		<p>Представления - объекты на js, у каждого есть свой html-шаблон, в котором должны быть те id, с которыми объект работает. 
		Всё остальное - по усмотрению. Объект подгружает свой шаблон сам и назначает обработчики ключевым элементам. В представлении
		можно писать функции обработк и т.п. Представление самостоятельно вызывает какое-либо из следующик представлений и может передавать
		ему сообщения через глобальный объект</p>
		
		<p>Всё общение с сервером происходит посредством передачи application/x-www-form-urlencoded JSONифициорванных-объектов. 
		Кодировкой/раскодировкой занимается объект Request(). Модули передают/получают сообщения друг-другу тоже в объектах</p>
		
		<p>За оформление отвечает общая стилевая таблица. Всё построено так, что можно и без неё. Если какому-то модулю понадобится
		своя - можно загрузить таблицу непосредственно в голову из объекта-представления</p>
		
		<p>За подгрузку с сервера отвечает dispatch.php. В объекте-запросе должно быть поле command: из которого dispatch узнаёт, 
		что ему грузить и что делать вообще. Ответ нестандартизирован - модуль, спрашивая. сам должен знать что он получит.</p>
		<p>За деталями - на <a href="https://github.com/VladimirMosharov/sandbox" target="_blank">github</a> или на <a href="mailto: mosharov@yandex.ru">mosharov@yandex.ru</a></p>
	</div>
	<h2>Это еще не всё!</h2>
	<div class="text_content">
		<blockquote class="clearfix">Не дождётесь!</blockquote>
		
		<p>Дальше будут prototypes, классы на php, sqlite и ...</p>
	</div>
	<div class="vspace_100"></div>
</section>
<footer class="wrapper clearfix">
	
</footer>